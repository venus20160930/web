 CREATE DATABASE venusDb
   WITH OWNER = postgres
   ENCODING = 'UTF8'
   TABLESPACE = pg_default
   LC_COLLATE = 'en_US.UTF-8'
   CONNECTION LIMIT = -1
   TEMPLATE template0;


Create table VENUS_USER_ROLE (
   ROLE_ID BIGINT NOT NULL,
   ROLE_NAME VARCHAR(50) NOT NULL,
   CREATE_USER_ID VARCHAR(50) NOT NULL,
   CREATE_DATE DATE NOT NULL,
   LAST_MODIFIED_USER_ID VARCHAR(50) NOT NULL,
   LAST_MODIFIED_DATE DATE NOT NULL,
   PRIMARY KEY (ROLE_ID)
);

Create table VENUS_USER (
   USER_ID BIGINT NOT NULL,
   ROLE_ID BIGINT NOT NULL,
   USER_NAME VARCHAR(20) NOT NULL,
   FULL_NAME VARCHAR(50) NOT NULL,
   EMAIL VARCHAR(50) NOT NULL,
   SEX INT NOT NULL,
   ADDRESS VARCHAR(200) NOT NULL,
   PHONE_NUMBER VARCHAR(11) NOT NULL,
   AVATAR_PATH VARCHAR(200) NOT NULL,
   PASSWORD VARCHAR(32) NOT NULL,
   PASSWORD_EXPIRED_DATE DATE NOT NULL,
   LAST_LOGIN_DATE DATE,
   NUMBER_TRY_LOGIN INT,
   IS_ACTIVED INT,
   IS_LOCKED INT,
   IS_DELETED INT,
   CREATE_USER_ID VARCHAR(50) NOT NULL,
   CREATE_DATE DATE NOT NULL,
   LAST_MODIFIED_USER_ID VARCHAR(50) NOT NULL,
   LAST_MODIFIED_DATE DATE NOT NULL,
   UNIQUE(EMAIL),
   PRIMARY KEY (USER_ID),
   CONSTRAINT fk_VERNUS_USER_ROLE FOREIGN KEY (ROLE_ID) REFERENCES VENUS_USER_ROLE (ROLE_ID)
);



Create table PASSWORD_RECOVER (
   ID BIGINT NOT NULL,
   USER_ID BIGINT NOT NULL,
   EXPRIED_DATE DATE NOT NULL,
   IS_COMPLETED INT NOT NULL,
   CREATE_USER_ID VARCHAR(50) NOT NULL,
   CREATE_DATE DATE NOT NULL,
   LAST_MODIFIED_USER_ID VARCHAR(50) NOT NULL,
   LAST_MODIFIED_DATE DATE NOT NULL,
   PRIMARY KEY (ID),
   CONSTRAINT fk_VENUS_USER FOREIGN KEY (USER_ID) REFERENCES VENUS_USER (USER_ID)
);

Create table PRODUCT_TYPE (
   PRODUCT_TYPE_ID BIGINT NOT NULL,
   PRODUCT_TYPE_NAME VARCHAR(50) NOT NULL,
   CREATE_USER_ID VARCHAR(50) NOT NULL,
   CREATE_DATE DATE NOT NULL,
   LAST_MODIFIED_USER_ID VARCHAR(50) NOT NULL,
   LAST_MODIFIED_DATE DATE NOT NULL,
   PRIMARY KEY (PRODUCT_TYPE_ID)
);

Create table PERIOD_TYPE (
   PERIOD_TYPE_ID BIGINT NOT NULL,
   PERIOD_TYPE_NAME VARCHAR(50) NOT NULL,
   ORDER_KEY BIGINT NOT NULL,
   CREATE_USER_ID VARCHAR(50) NOT NULL,
   CREATE_DATE DATE NOT NULL,
   LAST_MODIFIED_USER_ID VARCHAR(50) NOT NULL,
   LAST_MODIFIED_DATE DATE NOT NULL,
   PRIMARY KEY (PERIOD_TYPE_ID)
);

Create table PRE_PAYMENT_METHOD (
   PRE_PAYMENT_METHOD_ID BIGINT NOT NULL,
   PRE_PAYMENT_METHOD_NAME VARCHAR(50) NOT NULL,
   ORDER_KEY BIGINT NOT NULL,
   CREATE_USER_ID VARCHAR(50) NOT NULL,
   CREATE_DATE DATE NOT NULL,
   LAST_MODIFIED_USER_ID VARCHAR(50) NOT NULL,
   LAST_MODIFIED_DATE DATE NOT NULL,
   PRIMARY KEY (PRE_PAYMENT_METHOD_ID)
);

Create table PAYMENT_METHOD (
   PAYMENT_METHOD_ID BIGINT NOT NULL,
   PAYMENT_METHOD_NAME VARCHAR(50) NOT NULL,
   ORDER_KEY BIGINT NOT NULL,
   CREATE_USER_ID VARCHAR(50) NOT NULL,
   CREATE_DATE DATE NOT NULL,
   LAST_MODIFIED_USER_ID VARCHAR(50) NOT NULL,
   LAST_MODIFIED_DATE DATE NOT NULL,
   PRIMARY KEY (PAYMENT_METHOD_ID)
);

Create table AVAIABLE_SERVICE (
   AVAIABLE_SERVICE_ID BIGINT NOT NULL,
   AVAIABLE_SERVICE_NAME VARCHAR(50) NOT NULL,
   ORDER_KEY BIGINT NOT NULL,
   CREATE_USER_ID VARCHAR(50) NOT NULL,
   CREATE_DATE DATE NOT NULL,
   LAST_MODIFIED_USER_ID VARCHAR(50) NOT NULL,
   LAST_MODIFIED_DATE DATE NOT NULL,
   PRIMARY KEY (AVAIABLE_SERVICE_ID)
);

Create table AROUND_SERVICE (
   AROUND_SERVICE_ID BIGINT NOT NULL,
   AROUND_SERVICE_NAME VARCHAR(50) NOT NULL,
   ORDER_KEY BIGINT NOT NULL,
   CREATE_USER_ID VARCHAR(50) NOT NULL,
   CREATE_DATE DATE NOT NULL,
   LAST_MODIFIED_USER_ID VARCHAR(50) NOT NULL,
   LAST_MODIFIED_DATE DATE NOT NULL,
   PRIMARY KEY (AROUND_SERVICE_ID)
);

Create table FAVOURITE (
   USER_ID BIGINT NOT NULL,
   PRODUCT_ID BIGINT NOT NULL,
   CREATE_USER_ID VARCHAR(50) NOT NULL,
   CREATE_DATE DATE NOT NULL,
   LAST_MODIFIED_USER_ID VARCHAR(50) NOT NULL,
   LAST_MODIFIED_DATE DATE NOT NULL,
   PRIMARY KEY (USER_ID,PRODUCT_ID)
);

Create table PRODUCT (
   PRODUCT_ID BIGINT NOT NULL,
   POST_USER_ID BIGINT NOT NULL,
   POST_DATE DATE NOT NULL,
   UPDATE_DATE DATE NOT NULL,
   PRODUCT_STATUS CHAR(2) NOT NULL,
   CONFIRMED_USER_ID BIGINT,
   CONFIRMED_DATE DATE,
   SALE_COMMENT VARCHAR(500),
   TITLE VARCHAR(200) NOT NULL,
   PRODUCT_TYPE_ID BIGINT NOT NULL,
   PRICE DECIMAL NOT NULL,
   NUMBER_BED_ROOM INT NOT NULL,
   NUMBER_BATH_ROOM INT NOT NULL,
   ACREAGE FLOAT(10) NOT NULL,
   START_SALE_DATE DATE,
   ADDRESS VARCHAR(200) NOT NULL,
   LATITUDE VARCHAR(50) NOT NULL,
   LONGITUDE VARCHAR(50) NOT NULL,
   OTHER VARCHAR(1000) NOT NULL,
   PERIOD_TYPE_ID BIGINT NOT NULL,
   PERIOD_STRING VARCHAR(50) NOT NULL,
   PREPAYMENT_METHOD_ID BIGINT NOT NULL,
   PAYMENT_METHOD_ID BIGINT NOT NULL,
   PAYMENT_STRING VARCHAR(50) NOT NULL,
   CREATE_USER_ID VARCHAR(50) NOT NULL,
   CREATE_DATE DATE NOT NULL,
   LAST_MODIFIED_USER_ID VARCHAR(50) NOT NULL,
   LAST_MODIFIED_DATE DATE NOT NULL,
   PRIMARY KEY (PRODUCT_ID),
   CONSTRAINT fk_VENUS_USER FOREIGN KEY (POST_USER_ID) REFERENCES VENUS_USER (USER_ID),
   CONSTRAINT fk_VENUS_CONFIRM_USER FOREIGN KEY (CONFIRMED_USER_ID) REFERENCES VENUS_USER (USER_ID),
   CONSTRAINT fk_PRODUCT_TYPE FOREIGN KEY (PRODUCT_TYPE_ID) REFERENCES PRODUCT_TYPE (PRODUCT_TYPE_ID),
   CONSTRAINT fk_PERIOD_TYPE FOREIGN KEY (PERIOD_TYPE_ID) REFERENCES PERIOD_TYPE (PERIOD_TYPE_ID),
   CONSTRAINT fk_PREPAYMENT_METHOD FOREIGN KEY (PREPAYMENT_METHOD_ID) REFERENCES PREPAYMENT_METHOD (PREPAYMENT_METHOD_ID)
);
Create table PRODUCT_IMAGE (
   PRODUCT_ID BIGINT NOT NULL,
   IMAGE_INDEX BIGINT NOT NULL,
   EXPRIED_DATE DATE NOT NULL,
   IS_AVATAR INT NOT NULL,
   IMAGE_PATH VARCHAR(200) NOT NULL,
   EXTENSION VARCHAR(15) NOT NULL,
   CREATE_USER_ID VARCHAR(50) NOT NULL,
   CREATE_DATE DATE NOT NULL,
   LAST_MODIFIED_USER_ID VARCHAR(50) NOT NULL,
   LAST_MODIFIED_DATE DATE NOT NULL,
   PRIMARY KEY (PRODUCT_ID,IMAGE_INDEX)
);

Create table PRODUCT_AVAIABLE_SERVICE (
   PRODUCT_ID BIGINT NOT NULL,
   AVAIABLE_SERVICE_ID BIGINT NOT NULL,
   CREATE_USER_ID VARCHAR(50) NOT NULL,
   CREATE_DATE DATE NOT NULL,
   LAST_MODIFIED_USER_ID VARCHAR(50) NOT NULL,
   LAST_MODIFIED_DATE DATE NOT NULL,
   PRIMARY KEY (PRODUCT_ID, AVAIABLE_SERVICE_ID)
);

Create table PRODUCT_AROUND_SERVICE (
   PRODUCT_ID BIGINT NOT NULL,
   AROUND_SERVICE_ID BIGINT NOT NULL,
   CREATE_USER_ID VARCHAR(50) NOT NULL,
   CREATE_DATE DATE NOT NULL,
   LAST_MODIFIED_USER_ID VARCHAR(50) NOT NULL,
   LAST_MODIFIED_DATE DATE NOT NULL,
   PRIMARY KEY (PRODUCT_ID, AROUND_SERVICE_ID)
);

INSERT INTO VENUS_USER_ROLE(
            ROLE_ID, ROLE_NAME, CREATE_USER_ID, CREATE_DATE, LAST_MODIFIED_USER_ID, LAST_MODIFIED_DATE)
    VALUES (1, 'người dùng', 'nguyễn thanh sơn', '2016-05-17', 'sonnt2', '2016-05-17');

select * from VENUS_USER_ROLE
